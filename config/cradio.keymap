#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define L0 0
#define L1 1
#define L2 2
#define L3 3

#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33
#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31

&sk {
  release-after-ms = <5000>;
};

/ { 
  macros {
    /**
     * Macro for typing the `!=` combination.
     */
    excl_eq: excl_eq {
      label = "EXCL_EQ";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp EXCL &kp EQUAL>;
    };

    /**
     * Macro for typing the `[]` combination.
     */
    bkt_open_close: bkt_open_close {
      label = "BKT_OPEN_CLOSE";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp LBKT &kp RBKT>;
    };

    /**
     * Macro for typing the `()` combination.
     */
    par_open_close: par_open_close {
      label = "PAR_OPEN_CLOSE";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp LPAR &kp RPAR>;
    };

    /**
     * Macro for typing the `{}` combination.
     */
    brc_open_close: brc_open_close {
      label = "BRC_OPEN_CLOSE";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp LBRC &kp RBRC>;
    };
  };

  behaviors {
    /**
     * Left hand positional hold tap, used for home block modifiers
     */
    lhr: left_hand_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "LEFT_POSITIONAL_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <300>;
        quick-tap-ms = <200>;
        global-quick-tap;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_R>;
        hold-trigger-on-release;
    };

    /**
     * Right hand positional hold tap, used for home block modifiers
     */
    rhr: right_hand_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "RIGHT_POSITIONAL_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <300>;
        quick-tap-ms = <200>;
        global-quick-tap;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_L>;
        hold-trigger-on-release;
    };

    /**
     * Left hand positional layer-tap, used for home block modifiers
     */
    lhrl: left_hand_positional_momentary_layer_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "LEFT_POSITIONAL_MOMENTARY_LAYER_TAP";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <300>;
        quick-tap-ms = <200>;
        global-quick-tap;
        bindings = <&mo>, <&kp>;
        hold-trigger-key-positions = <KEYS_R>;
    };

    /**
     * Right hand positional layer-tap, used for home block modifiers
     */
    rhrl: right_hand_positional_momentary_layer_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "RIGHT_POSITIONAL_MOMENTARY_LAYER_TAP";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <300>;
        quick-tap-ms = <200>;
        global-quick-tap;
        bindings = <&mo>, <&kp>;
        hold-trigger-key-positions = <KEYS_L>;
    };

    /**
     * To-Layer on tap, Momentary-on-Hold behavior
     */
    tml: to_layer_tap_momentary_hold {
        compatible = "zmk,behavior-hold-tap";
        label = "TO_LAYER_TAP_MOMENTARY_HOLD";
        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <300>;
        bindings = <&mo>, <&to>;
    };

    /**
     * Key press `[` on single tap or key press `[]` on double tap.
     */
    td_bkt: tap_dance_bkt {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BKT";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp RBKT>, <&bkt_open_close>;
    };

    /**
     * Key press `(` on single tap or key press `()` on double tap.
     */
    td_par: tap_dance_par {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_PAR";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp RPAR>, <&par_open_close>;
    };

    /**
     * Key press `{` on single tap or key press `{}` on double tap.
     */
    td_brc: tap_dance_brc {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BRC";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp RBRC>, <&brc_open_close>;
    };

    /**
     * Key press `!` on single tap or macro in `!=` on double tap.
     */
    td_equal: tap_dance_equal {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_EQUAL";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp EQUAL>, <&excl_eq>;
    };

    /**
     * Key press `/` on single tap or key press `\` on double tap.
     */
    td_slash: td_slash {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_SLASH";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp SLASH>, <&kp BACKSLASH>;
    };
  };

  combos {
    compatible = "zmk,combos";

    /**
     * Key press `LCTRL + B` to enter tmux mode when keys 11 (S) and 12 (D) are tapped.
     *
     * Only enabled for layers 0 (base layer), 1 (icons and nums layers) and 2 (controls layer).
     */
    tmux {
      timeout-ms = <20>;
      key-positions = <11 12>;
      bindings = <&kp LC(B)>;
      layers = <0>;
    };

    /**
     * Key press `ESC` when keys 12 (D) and 13 (F) are tapped.
     */
    escape_key {
      timeout-ms = <20>;
      key-positions = <12 13>;
      bindings = <&kp ESC>;
      layers = <0 2>;
    };

    /**
     * Key press `TAB' when keys 17 (K) and 18 (L) are tapped.
     */
    tab_key {
      timeout-ms = <20>;
      key-positions = <17 18>;
      bindings = <&kp TAB>;
      layers = <0 2>;
    };

    /**
     * Bring up emojis menu in OS X when keys 16 (J) and 17 (K) are tapped
     */
    emojis_key {
      timeout-ms = <20>;
      key-positions = <16 17>;
      bindings = <&kp LG(LC(SPACE))>;
      layers = <0>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    /**
     * Alpha layer (L0)
     */
    layer_0 {
      bindings = <
        &kp Q  &kp W       &kp E        &kp R         &kp T           &kp Y       &kp U         &kp I        &kp O       &kp P
        &kp A  &lhrl L2 S  &lhr LCMD D  &lhr LCTRL F  &kp G           &kp H       &rhr LCTRL J  &rhr LCMD K  &rhrl L2 L  &kp SEMI
        &kp Z  &kp X       &kp C        &kp V         &kp B           &kp N       &kp M         &kp COMMA    &kp DOT     &kp SLASH
                                        &kp BSPC      &kp LSHFT       &kp SPACE   &mo L1
      >;
    };

    /**
     * Symbols layer (L1)
     */
    layer_1 {
      bindings = <
        &kp EXCL  &kp AT     &kp HASH   &kp DOLLAR  &kp LBKT       &td_bkt  &kp PLUS   &kp MINUS  &kp ASTRK  &kp PRCNT
        &kp AMPS  &kp UNDER  &kp DQT    &kp SQT     &kp LPAR       &td_par  &kp ENTER  &to L2     &to L3     &kp SEMI
        &kp PIPE  &kp TILDE  &kp CARET  &kp GRAVE   &kp LBRC       &td_brc  &td_equal  &kp COMMA  &kp DOT    &td_slash
                                        &kp BSPC    &kp LSHFT      &kp SPACE        &none
      >;
    };

    /**
     * Number and directions layer (L2)
     */
    layer_2 {
      bindings = <
        &none         &none     &kp UP    &none      &none             &kp ASTRK   &kp N7      &kp N8  &kp N9  &kp MINUS
        &kp LA(LEFT)  &kp LEFT  &kp DOWN  &kp RIGHT  &kp LA(RIGHT)     &kp SLASH   &kp N4      &kp N5  &kp N6  &kp PLUS
        &none         &none     &none     &none      &none             &kp N0      &kp N1      &kp N2  &kp N3  &kp DOT
                                          &kp BSPC   &kp LSHFT         &kp SPACE   &tml L1 L0
      >;
    };

    /**
     * Controls layer that contains OS controls (bluetooth, mute, play, etc.) and modifiers (L3)
     */
    layer_3 {
      bindings = <
        &kp LC(LG(Q))  &none      &none     &none      &none            &none         &kp C_PLAY    &kp C_PREV    &kp C_NEXT    &kp C_MUTE
        &kp LG(LS(X))  &sk LSHFT  &sk LCMD  &sk LCTRL  &none            &none         &kp LC(N1)    &kp LC(N2)    &kp LC(N3)    &kp LC(N4)
        &none          &none      &none     &sk LALT   &none            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR
                                            &kp BSPC   &kp LSHFT        &kp SPACE     &to L0
      >;
    };
  };
};
