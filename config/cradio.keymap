#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define L0 0
#define L1 1
#define L2 2
#define L3 3
#define L4 4

/ { 
  macros {
    /**
     * Macro for typing the `!=` combination.
     */
    excl_eq: excl_eq {
      label = "EXCL_EQ";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp EXCL &kp EQUAL>;
    };
  };

  behaviors {
    /**
     * Key press `~` on single tapped or key press ``` on double tapped.
     */
    td_grave: tap_dance_grave {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_GRAVE";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp GRAVE>, <&kp TILDE>;
    };

    /**
     * Key press `[` on single tap or key press `]` on double tap.
     */
    td_bkt: tap_dance_bkt {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BKT";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp LBKT>, <&kp RBKT>;
    };

    /**
     * Key press `(` on single tap or key press `)` on double tap.
     */
    td_par: tap_dance_par {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_PAR";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp LPAR>, <&kp RPAR>;
    };

    /**
     * Key press `{` on single tap or key press `}` on double tap.
     */
    td_brc: tap_dance_brc {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BRC";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp LBRC>, <&kp RBRC>;
    };

    /**
     * Key press `'` on single tap, hold LALT modifier on hold, or key press `"` on double tap.
     */
    td_qt: tap_dance_qt {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_QT";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&hm LALT SQT>, <&kp DQT>;
    };

    /**
     * Key press `!` on single tap or macro in `!=` on double tap.
     */
    td_excl: tap_dance_excl {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_EXCL";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp EXCL>, <&excl_eq>;
    };

    /**
     * Key press `.` on single tap or key press `,` on double tap.
     */
    td_dot: td_dot {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_DOT";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp DOT>, <&kp COMMA>;
    };

    /**
     * Key press `/` on single tap or key press `\` on double tap.
     */
    td_slash: td_slash {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_SLASH";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp SLASH>, <&kp BACKSLASH>;
    };

    /**
     * Key press `*` on single tap or key press `#` on double tap.
     */
    td_astrk: td_astrk {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_ASTRK";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp ASTRK>, <&kp HASH>;
    };

    /**
     * Configuration for hold-tap behavior used for home-row modifiers.
     */
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <0>;
      flavor = "balanced";
      bindings = <&kp>, <&kp>;
    };
  };

  combos {
    compatible = "zmk,combos";

    /**
     * Key press `LCTRL + B` to enter tmux mode when keys 11 (S) and 12 (D) are tapped.
     *
     * Only enabled for layers 0 (base layer), 1 (icons and nums layers) and 2 (controls layer).
     */
    tmux {
      timeout-ms = <20>;
      key-positions = <11 12>;
      bindings = <&kp LC(B)>;
      layers = <0 1 2>;
    };

    /**
     * Key press `ESC` when keys 12 (D) and 13 (F) are tapped.
     */
    escape_key {
      timeout-ms = <20>;
      key-positions = <12 13>;
      bindings = <&kp ESC>;
    };

    /**
     * Key press `ENTER` when keys 16 (J) and 17 (K) are tapped.
     */
    enter_key {
      timeout-ms = <20>;
      key-positions = <16 17>;
      bindings = <&kp ENTER>;
    };

    /**
     * Key press `TAB' when keys 17 (K) and 18 (L) are tapped.
     */
    tab_key {
      timeout-ms = <20>;
      key-positions = <17 18>;
      bindings = <&kp TAB>;
    };

    /**
     * Key press `LCTRL + LCMD + Q` (lock screen in macOS) when keys 27 (,) and 28 (.) are tapped.
     *
     * Only enabled for layer 0 (base layer).
     */
    lock_screen {
      timeout-ms = <20>;
      key-positions = <27 28>;
      bindings = <&kp LC(LG(Q))>;
      layers = <0>;
    };

    /**
     * Key press `LSHFT + LCMD + X` (open 1password) when keys 28 (.) and 29 (/) are tapped.
     *
     * Only enabled for layer 0 (base layer).
     */
    one_password {
      timeout-ms = <20>;
      key-positions = <28 29>;
      bindings = <&kp LS(LG(X))>;
      layers = <0>;
    };

    /**
     * Toggle layer 2 when keys 18 (L) and 19 (;) are tapped.
     */
    toggle_l2 {
      timeout-ms = <20>;
      key-positions = <18 19>;
      bindings = <&tog L2>;
    };

    /**
     * Toggle layer 3 (Age of Empires II layer) when keys 8 (O) and 9 (P) are tapped.
     *
     * Only enabled for layers 0 and 3.
     */
    toggle_l3 {
      timeout-ms = <20>;
      key-positions = <8 9>;
      bindings = <&tog L3>;
      layers = <0 3>;
    };

    /**
     * Key press `DEL` when keys 11 (S) and 12 (D) are tapped.
     *
     * Only enabled for layer 3 (Age of Empires II layer).
     */
    del {
        timeout-ms = <20>;
        key-positions = <11 12>;
        bindings = <&kp DEL>;
        layers = <3>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    /**
     * Base layer that contains all characters and writting controls (space and backspace) as well as the most
     * common icons.
     */
    layer_0 {
      bindings = <
        &kp Q        &kp W       &kp E  &kp R     &kp T           &kp Y       &kp U       &kp I      &kp O         &kp P
        &kp A        &kp S       &kp D  &kp F     &kp G           &kp H       &kp J       &kp K      &kp L         &lt L2 SEMI
        &hm LCTRL Z  &hm LCMD X  &kp C  &kp V     &kp B           &kp N       &kp M       &kp COMMA  &hm LCMD DOT  &hm LCTRL SLASH
                                        &kp BSPC  &kp LSHFT       &kp SPACE   &mo L1
      >;
    };

    /**
     * Icons and numbers layer.
     */
    layer_1 {
      bindings = <
        &td_excl        &kp AT          &kp DOLLAR       &td_astrk  &td_bkt            &kp N0     &kp N1       &kp N2        &kp N3       &td_dot
        &hm LCTRL AMPS  &hm LCMD UNDER  &hm LSHFT MINUS  &td_qt     &td_par            &kp PLUS   &hm RALT N4  &hm RSHFT N5  &hm RCMD N6  &hm RCTRL SEMI
        &kp PIPE        &kp PRCNT       &kp CARET        &td_grave  &td_brc            &kp EQUAL  &kp N7       &kp N8        &kp N9       &td_slash
                                                         &kp BSPC   &kp LSHFT          &kp SPACE  &to L0
      >;
    };

    /**
     * Controls layer that contains OS controls (bluetooth, mute, play, etc.) and modifiers.
     */
    layer_2 {
      bindings = <
        &kp C_MUTE  &kp C_PREV  &kp C_NEXT  &kp C_PLAY  &none            &none         &none         &kp UP        &none         &none
        &kp LCTRL   &kp LCMD    &kp LSHFT   &kp LALT    &none            &none         &kp LEFT      &kp DOWN      &kp RIGHT     &none
        &none       &kp LG(X)   &kp LG(C)   &kp LG(V)   &none            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
                                            &kp BSPC    &kp LSHFT        &kp SPACE     &to L0
      >;
    };

    /**
     * Age of Empires II layer with characters and specific layers modifiers.
     */
    layer_3 {
      bindings = <
        &kp Q  &kp W  &kp E  &kp R        &kp T        &kp Y       &kp U       &kp I      &kp O    &kp P
        &kp A  &kp S  &kp D  &hm LSHFT F  &kp G        &kp H       &kp J       &kp K      &kp L    &kp SEMI
        &kp Z  &kp X  &kp C  &kp V        &kp B        &kp N       &kp M       &kp COMMA  &kp DOT  &kp SLASH
                             &kp BSPC     &mo L4       &kp SPACE   &to L0
      >;
    };

    /**
     * Age of Empires II layer with control group controls.
     */
    layer_4 {
      bindings = <
        &kp LC(N4)  &kp LC(N3)  &kp LC(N2)  &kp LC(N1)  &kp LC(N5)       &none  &none  &none  &none  &none
        &kp N4      &kp N3      &kp N2      &kp N1      &kp N5           &none  &none  &none  &none  &none
        &none       &none       &none       &none       &none            &none  &none  &none  &none  &none
                                            &none       &none            &none  &to L0
      >;
    };
  };
};
