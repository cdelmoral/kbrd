#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define L0 0
#define L1 1
#define L2 2

/ { 
  macros {
    excl_eq: excl_eq {
      label = "EXCL_EQ";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp EXCL &kp EQUAL>;
    };
  };

  behaviors {
    tda: tap_dance_a {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_A";
      #binding-cells = <0>;
      tapping-term-ms = <150>;
      bindings = <&kp A>, <&kp AT>;
    };

    tds: tap_dance_s {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_S";
      #binding-cells = <0>;
      tapping-term-ms = <150>;
      bindings = <&kp S>, <&kp DOLLAR>;
    };

    td_bkt: tap_dance_bkt {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BKT";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp LBKT>, <&kp RBKT>;
    };

    td_par: tap_dance_par {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_PAR";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp LPAR>, <&kp RPAR>;
    };

    td_brc: tap_dance_brc {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BRC";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp LBRC>, <&kp RBRC>;
    };

    td_qt: tap_dance_qt {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_QT";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp SQT>, <&kp DQT>;
    };

    td_excl: tap_dance_excl {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_EXCL";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp EXCL>, <&excl_eq>;
    };

    td_dot: td_dot {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_DOT";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp DOT>, <&kp COMMA>;
    };

    td_slash: td_slash {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_SLASH";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp SLASH>, <&kp BACKSLASH>;
    };

    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <0>;
      flavor = "balanced";
      bindings = <&kp>, <&kp>;
    };
  };

  combos {
    compatible = "zmk,combos";

    combo_tmux {
      timeout-ms = <20>;
      key-positions = <2 3>;
      bindings = <&kp LC(B)>;
    };

    combo_esc {
      timeout-ms = <20>;
      key-positions = <12 13>;
      bindings = <&kp ESC>;
    };

    combo_enter {
      timeout-ms = <20>;
      key-positions = <16 17>;
      bindings = <&kp ENTER>;
    };

    combo_tab {
      timeout-ms = <20>;
      key-positions = <6 7>;
      bindings = <&kp TAB>;
    };

    combo_lock {
      timeout-ms = <20>;
      key-positions = <0 1>;
      bindings = <&kp LC(LG(Q))>;
      layers = <0>;
    };

    combo_pass {
      timeout-ms = <20>;
      key-positions = <28 29>;
      bindings = <&kp LS(LG(X))>;
      layers = <0>;
    };

    tog_l1_1 {
      timeout-ms = <20>;
      key-positions = <3 4>;
      bindings = <&tog L1>;
    };

    tog_l2_1 {
      timeout-ms = <20>;
      key-positions = <13 14>;
      bindings = <&tog L2>;
    };

    tog_l1_2 {
      timeout-ms = <20>;
      key-positions = <5 6>;
      bindings = <&tog L1>;
    };

    tog_l2_2 {
      timeout-ms = <20>;
      key-positions = <15 16>;
      bindings = <&tog L2>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    layer_0 {
      bindings = <
        &kp Q        &kp W       &kp E  &kp R     &kp T           &kp Y    &kp U       &kp I      &kp O         &kp P
        &tda         &tds        &kp D  &kp F     &kp G           &kp H    &kp J       &kp K      &kp L         &kp SEMI
        &hm LCTRL Z  &hm LCMD X  &kp C  &kp V     &kp B           &kp N    &kp M       &kp COMMA  &hm LCMD DOT  &hm LCTRL SLASH
                                        &kp BSPC  &kp LSHFT       &mo L1   &kp SPACE
      >;
    };

    layer_1 {
      bindings = <
        &td_excl  &kp CARET  &kp TILDE  &kp ASTRK  &td_bkt            &kp N0     &kp N1     &kp N2  &kp N3  &td_dot
        &kp AMPS  &kp UNDER  &kp MINUS  &td_qt     &td_par            &kp PLUS   &kp N4     &kp N5  &kp N6  &kp SEMI
        &kp PIPE  &kp PRCNT  &kp HASH   &kp GRAVE  &td_brc            &kp EQUAL  &kp N7     &kp N8  &kp N9  &td_slash
                                        &kp BSPC   &kp LSHFT          &mo L1     &kp SPACE
      >;
    };

    layer_2 {
      bindings = <
        &kp C_MUTE  &kp C_PREV  &kp C_NEXT  &kp C_PLAY  &none            &none         &none         &kp UP        &none         &none
        &kp LCTRL   &kp LCMD    &kp LSHFT   &kp LALT    &none            &none         &kp LEFT      &kp DOWN      &kp RIGHT     &none
        &none       &kp LG(X)   &kp LG(C)   &kp LG(V)   &none            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL_3  &bt BT_SEL 4
                                            &kp BSPC    &to L0           &to L0        &kp SPACE
      >;
    };
  };
};
