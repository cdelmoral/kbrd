#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define L0 0
#define L1 1
#define L2 2
#define L3 3

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 23 24 25 26 27 28 35 36 37
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 29 30 31 32 33 34 38 39 40

&sk {
  release-after-ms = <5000>;
};

/ { 
  behaviors {
    /**
     * Left hand positional hold tap, used for home block modifiers
     */
    lhr: left_hand_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "LEFT_POSITIONAL_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <300>;
        quick-tap-ms = <200>;
        global-quick-tap;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_R>;
        hold-trigger-on-release;
    };

    /**
     * Right hand positional hold tap, used for home block modifiers
     */
    rhr: right_hand_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "RIGHT_POSITIONAL_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <300>;
        quick-tap-ms = <200>;
        global-quick-tap;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_L>;
        hold-trigger-on-release;
    };

    /**
     * To-Layer on tap, Momentary-on-Hold behavior
     */
    tml: to_layer_tap_momentary_hold {
        compatible = "zmk,behavior-hold-tap";
        label = "TO_LAYER_TAP_MOMENTARY_HOLD";
        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <300>;
        bindings = <&mo>, <&to>;
    };

    /**
     * Key press `/` on single tap or key press `\` on double tap.
     */
    td_slash: td_slash {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_SLASH";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp SLASH>, <&kp BACKSLASH>;
    };
  };

  combos {
    compatible = "zmk,combos";

    /**
     * Key press `LCTRL + B` to enter tmux mode when keys 15 (S) and 16 (D) are tapped.
     */
    tmux {
      timeout-ms = <20>;
      key-positions = <15 16>;
      bindings = <&kp LC(B)>;
      layers = <0>;
    };

    /**
     * Key press `ESC` when keys 16 (D) and 17 (F) are tapped.
     */
    escape_key {
      timeout-ms = <20>;
      key-positions = <12 13>;
      bindings = <&kp ESC>;
      layers = <0>;
    };

    /**
     * Key press `TAB' when keys 20 (K) and 21 (L) are tapped.
     */
    tab_key {
      timeout-ms = <20>;
      key-positions = <20 21>;
      bindings = <&kp TAB>;
      layers = <0 2>;
    };

    /**
     * Bring up emojis menu in OS X when keys 19 (J) and 20 (K) are tapped
     */
    emojis_key {
      timeout-ms = <20>;
      key-positions = <19 20>;
      bindings = <&kp LG(LC(SPACE))>;
      layers = <0>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    /**
     * Alpha layer (L0)
     */
    layer_0 {
      bindings = <
        &none &kp Q  &kp W       &kp E        &kp R         &kp T           &kp Y       &kp U         &kp I        &kp O       &kp P      &none
        &none &kp A  &kp S       &lhr LCMD D  &lhr LCTRL F  &kp G           &kp H       &rhr LCTRL J  &rhr LCMD K  &kp L       &kp SEMI   &none
        &none &kp Z  &kp X       &kp C        &kp V         &kp B           &kp N       &kp M         &kp COMMA    &kp DOT     &kp SLASH  &none
                                 &none        &kp BSPC      &kp LSHFT       &kp SPACE   &mo L1        &none
      >;
    };

    /**
     * Symbols layer (L1)
     */
    layer_1 {
      bindings = <
        &none  &kp EXCL  &kp AT     &kp HASH   &kp DOLLAR  &kp LBKT       &kp RBKT      &kp PLUS   &kp MINUS  &kp ASTRK  &kp PRCNT  &none
        &none  &kp AMPS  &kp UNDER  &kp DQT    &kp SQT     &kp LPAR       &kp RPAR      &kp ENTER  &to L2     &to L3     &kp SEMI   &none
        &none  &kp PIPE  &kp TILDE  &kp CARET  &kp GRAVE   &kp LBRC       &kp RBRC      &kp EQUAL  &kp COMMA  &kp DOT    &td_slash  &none
                                    &none      &kp BSPC    &kp LSHFT      &kp SPACE    &none
      >;
    };

    /**
     * Number and directions layer (L2)
     */
    layer_2 {
      bindings = <
        &none  &none         &none     &kp UP    &none      &none             &kp ASTRK   &kp N7      &kp N8  &kp N9  &kp MINUS  &none
        &none  &kp LA(LEFT)  &kp LEFT  &kp DOWN  &kp RIGHT  &kp LA(RIGHT)     &kp SLASH   &kp N4      &kp N5  &kp N6  &kp PLUS   &none
        &none  &none         &none     &none     &none      &none             &kp N0      &kp N1      &kp N2  &kp N3  &kp DOT    &none
                                       &none     &kp BSPC   &kp LSHFT         &kp SPACE   &tml L1 L0  &none
      >;
    };

    /**
     * Controls layer that contains OS controls (bluetooth, mute, play, etc.) and modifiers (L3)
     */
    layer_3 {
      bindings = <
        &none  &kp LC(LG(Q))  &none      &none     &none      &none            &none         &kp C_PLAY    &kp C_PREV    &kp C_NEXT    &kp C_MUTE  &none
        &none  &kp LG(LS(X))  &sk LSHFT  &sk LCMD  &sk LCTRL  &none            &none         &kp LC(N1)    &kp LC(N2)    &kp LC(N3)    &kp LC(N4)  &none
        &none  &none          &none      &none     &sk LALT   &none            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR  &none
                                  &none     &kp BSPC   &kp LSHFT        &kp SPACE     &to L0        &none
      >;
    };
  };
};
